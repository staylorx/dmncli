plugins {
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'edu.sc.seis.launch4j' version '2.5.4'

    id "nebula.lint" version "18.0.1"
}

allprojects {
  apply plugin: 'nebula.lint'
  gradleLint.rules = ['all-dependency']
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation('org.apache.groovy:groovy-all:4.0.8')
    implementation(platform("org.camunda.bpm.dmn:camunda-engine-dmn-bom:7.18.0"))
    implementation("org.camunda.bpm.dmn:camunda-engine-dmn")
    implementation('commons-io:commons-io:2.11.0')
    implementation("org.slf4j:slf4j-api:2.0.6")
    implementation("ch.qos.logback:logback-classic:1.4.5")
    implementation('info.picocli:picocli:4.7.1')
    implementation 'org.apache.groovy:groovy-json:4.0.8'
    implementation 'org.apache.groovy:groovy:4.0.8'
    implementation 'org.camunda.bpm.model:camunda-dmn-model:7.18.0'
    implementation 'org.camunda.bpm.model:camunda-xml-model:7.18.0'
    implementation 'org.camunda.commons:camunda-commons-typed-values:7.18.0'

    testImplementation('org.spockframework:spock-core:2.4-M1-groovy-4.0')
}

sourceSets {
    main {
        java {
            srcDirs = [] // don't compile Java code twice
        }
        groovy {
            srcDirs = [ 'src/main/groovy', 'src/main/java' ]
        }
    }
}

test {
    testLogging {
        useJUnitPlatform()
        showStandardStreams = true
        testLogging.exceptionFormat = 'full'
    }
    //reports {
    //    junitXml.enabled = false
    //    html.enabled = true
    //}               
}

application {
    getMainClass().set('dmncli.CamundaRunnerMain')
    mainClassName = 'dmncli.CamundaRunnerMain' //jengelman's shadowbase plugin needs this
}

launch4j {
    headerType = "console"
    mainClassName = 'dmncli.CamundaRunnerMain'
    //icon = "${projectDir}/icons/myApp.ico"
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileGroovy {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestGroovy {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
